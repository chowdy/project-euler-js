const getPrimes = require('get-primes')

// This is used for debugging. "Ugh. Is that 72 million? or 7.2 billion?"
const approx = require('approximate-number')

// duration.fmt(<time>) -> get pretty time. For benchmarking.
const duration = require('human-duration')


/*
 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
 * The sum of these multiples is 23.
 *
 * Find the sum of all the multiples of 3 or 5 below 1000.
 */
function problem001() {
    sum = 0
    for (var i = 0; i < 1000; i++) {
        if (i%3 == 0 || i%5 == 0) {
            sum += i
        }
    }
    return sum
}

/*
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
 * the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
 * even-valued terms.
 */
function problem002() {
    sum = 0
    n = 2
    n_1 = 1
    while (n < 4000000) {

        if (n%2 == 0) {
            sum += n
        }

        n_next = n + n_1
        n_1 = n
        n = n_next
    }
    return sum
}

/*
 * The prime factors of 13195 are 5, 7, 13 and 29.
 * What is the largest prime factor of the number 600851475143 ?
 */
function problem003() {
    primeFactors = []

    num = 600851475143
    numBuf = num
    for (i = 2; numBuf > 1; i++) {
        if (numBuf%i==0) {
            primeFactors.push(i);
            numBuf = numBuf/i
        }
    }

    // This ... is super weird
    return Math.max(...primeFactors)
}

/*
 * A palindromic number reads the same both ways.
 * The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
 *
 * Find the largest palindrome made from the product of two 3-digit numbers.
 */
function problem004() {
    function isPallindrome(val) {
        valstr = val.toString()
        for (var i = 0; i < valstr.length / 2; i ++) {
            if (valstr[i] != valstr[valstr.length - i - 1]) {
                return false
            }
        }
        return true
    }

    max = 0
    for (var i = 0; i <= 999; i++) {
        for (var j = 0; j <= 999; j++) {
            prod = i*j
            if (isPallindrome(prod) && prod > max) {
                max = prod
            }
        }
    }

    return max
}

/*
 * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 * What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
 */
function problem005() {

    function isValid(n)  {
        for (var i = 1; i <= 20; i++) {
            if (n % i != 0) {
                return false
            }
        }
        return true
    }

    num = 1
    while (true) {
        if (isValid(num)) {
            return num
        } else {
            num += 1
        }
    }
}

/*
 * The sum of the squares of the first ten natural numbers is,
 * 1^2 + 2^2 + ... + 10^2 = 385
 * The square of the sum of the first ten natural numbers is,
 * (1 + 2 + ... + 10)^2 = 552 = 3025
 *
 * Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
 *
 * Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
 */
function problem006() {
    function sumOfSquares(numbers) {
        sum = 0
        numbers.forEach((n) => { sum += n*n })
        return sum
    }

    function squareOfSum(numbers) {
        sum = 0
        numbers.forEach((n) => { sum += n })
        return sum * sum
    }

    // This is how you make a range o_O pretty gross
    numbers = [...Array(101).keys()];

    return squareOfSum(numbers) - sumOfSquares(numbers)
}

/*
 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
 * What is the 10 001st prime number?
 */
// gross but fast
function problem007() {
    target = 10001
    primes = []
    max = 10000
    while (primes.length < target) {
        primes = getPrimes(max)
        max += 1000
    }
    return primes[target-1]
}

/*
 * The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
 *
 * < see number variable >
 *
 * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
 * What is the value of this product?
 */
function problem008() {

    number = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"

    adjacentCount = 13
    max = 0
    numz = []
    for (i = 0; i < number.length; i++) {
        try {
            num = number.slice(i, i + adjacentCount)
            val = num.split("").map((s) => {
                return parseInt(s)
            }).reduce((m, z) => {
                return m * z
            }, 1)
            if (val > max) {
                max = val
            }
        } catch (e) {}
    }

    return max
}

/*
 * A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
 * a^2 + b^2 = c^2
 * For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
 *
 * There exists exactly one Pythagorean triplet for which a + b + c = 1000.
 * Find the product abc.
 */
function problem009() {
    ABC_SUM = 1000
    for (c = 1; c < ABC_SUM; c++) {
        for (b = 1; b < c; b++) {
            for (a = 1; a < b; a++) {
                if ((a*a + b*b) == c*c && (a+b+c) == ABC_SUM) {
                    return a*b*c
                }
            }
        }
    }
}

/*
 * The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
 * Find the sum of all the primes below two million.
 */
function problem010() {
    return getPrimes(2000000).reduce((m,i) => { return m + i })
}


/*
 * In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
 *
 * < see grid variable >
 *
 * The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
 *
 * What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally)
 * in the 20×20 grid?
 */
function problem011() {
    grid = [ "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08", "49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00", "81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65", "52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91", "22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80", "24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50", "32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70", "67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21", "24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72", "21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95", "78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92", "16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57", "86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58", "19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40", "04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66", "88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69", "04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36", "20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16", "20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54", "01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"
    ].map((s) => { return s.split(" ").map((n) => { return parseInt(n) }) })

    directions = [
        [1,0],   // right
        [0,1],   // up
        [-1,0],  // left
        [0,-1],  // down
        [1,-1],  // down+right
        [-1,1],  // up+left
        [-1,-1], // down+left
        [1,1],   // up+right
    ]

    // Try every direction originating with each cell in the grid
    ADJACENT_LENGTH = 4
    max = 0
    for (i = 0; i < grid.length; i++) {
        for (j = 0; j < grid[i].length; j++) {
            trips = []
            directions.forEach((direction) => {
                trip = []
                for (len = 0; len < ADJACENT_LENGTH; len++) {
                    val = undefined
                    try {
                        val = grid[i + len * direction[0]][j + len * direction[1]]
                    } catch (e) {}

                    if (val) {
                        trip.push(val)
                    }
                }
                if (trip.length == ADJACENT_LENGTH) {
                    trips.push(trip)
                }
            })

            tripProds = trips.map((trip) => {
                return trip.reduce((m,i) => { return m * i }, 1)
            })
            localMax = Math.max(...tripProds)
            if (localMax > max) {
                max = localMax
            }
        }
    }

    return max
}

/*
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 */
function problem012() {
    MAX_DIVISORS = 500
    triNum = 1
    triNumCount = 1
    numDivs = 1
    while(true) {
        numDivs = 2
        num = triNum
        for (i = 2; i <= num / 2; i++) {
            if (num % i == 0) { numDivs += 1 }
        }
        if (numDivs > MAX_DIVISORS) {
            return triNum
        } else {
            triNumCount++
            triNum += triNumCount
        }
    }
}

/*
 * Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
 *
 * < see numbers variable in function >
 */
function problem013() {
    numbers = [ 37107287533902102798797998220837590246510135740250n, 46376937677490009712648124896970078050417018260538n, 74324986199524741059474233309513058123726617309629n, 91942213363574161572522430563301811072406154908250n, 23067588207539346171171980310421047513778063246676n, 89261670696623633820136378418383684178734361726757n, 28112879812849979408065481931592621691275889832738n, 44274228917432520321923589422876796487670272189318n, 47451445736001306439091167216856844588711603153276n, 70386486105843025439939619828917593665686757934951n, 62176457141856560629502157223196586755079324193331n, 64906352462741904929101432445813822663347944758178n, 92575867718337217661963751590579239728245598838407n, 58203565325359399008402633568948830189458628227828n, 80181199384826282014278194139940567587151170094390n, 35398664372827112653829987240784473053190104293586n, 86515506006295864861532075273371959191420517255829n, 71693888707715466499115593487603532921714970056938n, 54370070576826684624621495650076471787294438377604n, 53282654108756828443191190634694037855217779295145n, 36123272525000296071075082563815656710885258350721n, 45876576172410976447339110607218265236877223636045n, 17423706905851860660448207621209813287860733969412n, 81142660418086830619328460811191061556940512689692n, 51934325451728388641918047049293215058642563049483n, 62467221648435076201727918039944693004732956340691n, 15732444386908125794514089057706229429197107928209n, 55037687525678773091862540744969844508330393682126n, 18336384825330154686196124348767681297534375946515n, 80386287592878490201521685554828717201219257766954n, 78182833757993103614740356856449095527097864797581n, 16726320100436897842553539920931837441497806860984n, 48403098129077791799088218795327364475675590848030n, 87086987551392711854517078544161852424320693150332n, 59959406895756536782107074926966537676326235447210n, 69793950679652694742597709739166693763042633987085n, 41052684708299085211399427365734116182760315001271n, 65378607361501080857009149939512557028198746004375n, 35829035317434717326932123578154982629742552737307n, 94953759765105305946966067683156574377167401875275n, 88902802571733229619176668713819931811048770190271n, 25267680276078003013678680992525463401061632866526n, 36270218540497705585629946580636237993140746255962n, 24074486908231174977792365466257246923322810917141n, 91430288197103288597806669760892938638285025333403n, 34413065578016127815921815005561868836468420090470n, 23053081172816430487623791969842487255036638784583n, 11487696932154902810424020138335124462181441773470n, 63783299490636259666498587618221225225512486764533n, 67720186971698544312419572409913959008952310058822n, 95548255300263520781532296796249481641953868218774n, 76085327132285723110424803456124867697064507995236n, 37774242535411291684276865538926205024910326572967n, 23701913275725675285653248258265463092207058596522n, 29798860272258331913126375147341994889534765745501n, 18495701454879288984856827726077713721403798879715n, 38298203783031473527721580348144513491373226651381n, 34829543829199918180278916522431027392251122869539n, 40957953066405232632538044100059654939159879593635n, 29746152185502371307642255121183693803580388584903n, 41698116222072977186158236678424689157993532961922n, 62467957194401269043877107275048102390895523597457n, 23189706772547915061505504953922979530901129967519n, 86188088225875314529584099251203829009407770775672n, 11306739708304724483816533873502340845647058077308n, 82959174767140363198008187129011875491310547126581n, 97623331044818386269515456334926366572897563400500n, 42846280183517070527831839425882145521227251250327n, 55121603546981200581762165212827652751691296897789n, 32238195734329339946437501907836945765883352399886n, 75506164965184775180738168837861091527357929701337n, 62177842752192623401942399639168044983993173312731n, 32924185707147349566916674687634660915035914677504n, 99518671430235219628894890102423325116913619626622n, 73267460800591547471830798392868535206946944540724n, 76841822524674417161514036427982273348055556214818n, 97142617910342598647204516893989422179826088076852n, 87783646182799346313767754307809363333018982642090n, 10848802521674670883215120185883543223812876952786n, 71329612474782464538636993009049310363619763878039n, 62184073572399794223406235393808339651327408011116n, 66627891981488087797941876876144230030984490851411n, 60661826293682836764744779239180335110989069790714n, 85786944089552990653640447425576083659976645795096n, 66024396409905389607120198219976047599490197230297n, 64913982680032973156037120041377903785566085089252n, 16730939319872750275468906903707539413042652315011n, 94809377245048795150954100921645863754710598436791n, 78639167021187492431995700641917969777599028300699n, 15368713711936614952811305876380278410754449733078n, 40789923115535562561142322423255033685442488917353n, 44889911501440648020369068063960672322193204149535n, 41503128880339536053299340368006977710650566631954n, 81234880673210146739058568557934581403627822703280n, 82616570773948327592232845941706525094512325230608n, 22918802058777319719839450180888072429661980811197n, 77158542502016545090413245809786882778948721859617n, 72107838435069186155435662884062257473692284509516n, 20849603980134001723930671666823555245252804609722n, 53503534226472524250874054075591789781264330331690n ]

    // This is pretty
    return numbers.reduce((m,i) => { return m + i }).toString().substr(0, 10)
}

/*
 * The following iterative sequence is defined for the set of positive integers:
 * n → n/2 (n is even)
 * n → 3n + 1 (n is odd)
 * Using the rule above and starting with 13, we generate the following sequence:
 *
 * 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
 * It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been
 * proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
 *
 * Which starting number, under one million, produces the longest chain?
 *
 * NOTE: Once the chain starts the terms are allowed to go above one million.
 */
function problem014() {
    longestChain = []
    for (number = 1; number < 1000000; number++) {
        chain = []
        n = number
        while (n) {
            chain.push(n)
            if (n == 1) {
                n = undefined
            } else if (n%2 == 0) {
                n /= 2
            } else {
                n = 3*n + 1
            }
        }
        if (chain.length > longestChain.length) {
            longestChain = chain
        }
    }
    return longestChain[0]
}

// TODO: Me
function problem015() {}

/*
 * 2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
 * What is the sum of the digits of the number 2^1000?
 */
function problem016() {
    return (2n ** 1000n).toString().split("").reduce((m,i) => { return m + parseInt(i) }, 0)
}

/*
 * If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19
 * letters used in total.
 * If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
 *
 * NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115
 * (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with
 * British usage.
 */
function problem017() {

    NUM_WORDS = {
        ones: [ 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'],
        teens: [ 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen' ],
        tens: [ 'zero', 'ten', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety' ],
    }

    function numToEng(n) {

        nBuf = n
        numString = ""

        // thousands
        if (nBuf >= 1000) {
            thousands = parseInt(n / 1000)
            thousandsWord = NUM_WORDS.ones[thousands]
            numString += thousandsWord + "thousand"
            nBuf -= (thousands * 1000)
        }

        // hundreds
        if (nBuf >= 100) {
            hundreds = parseInt(nBuf / 100)
            hundredsWord = NUM_WORDS.ones[hundreds]
            numString += hundredsWord + "hundred"
            nBuf -= (hundreds * 100)

            if (nBuf > 0) {
                numString += "and"
            }
        }

        // tens
        if (nBuf >= 10) {
            tens = parseInt(nBuf / 10)

            // teens
            if (nBuf < 20)  {
                numString += NUM_WORDS.teens[nBuf - 10]
                nBuf -= nBuf
            } else {
                tensWord = NUM_WORDS.tens[tens]
                numString += tensWord
                nBuf -= (tens * 10)
            }
        }

        // ones
        if (nBuf > 0) {
            numString += NUM_WORDS.ones[nBuf]
            nBuf = 0
        }

        return numString

    }
    
    numbers = [...Array(1001).keys()]
    numbers.shift()
    numbers = numbers.map((i) => { return numToEng(i) }).map((i) => { return i.length }).reduce((m,i) => { return m + i })
    return numbers
}

PROBLEM = problem017
console.log("problem:  " + PROBLEM.name)
start = Date.now()
console.log("solution: " + PROBLEM())
console.log("took:     " + duration.fmt(Date.now() - start))