var getPrimes = require('get-primes')

/*
 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
 * The sum of these multiples is 23.
 *
 * Find the sum of all the multiples of 3 or 5 below 1000.
 */
function problem001() {
    sum = 0
    for (var i = 0; i < 1000; i++) {
        if (i%3 == 0 || i%5 == 0) {
            sum += i
        }
    }
    return sum
}

/*
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
 * the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
 * even-valued terms.
 */
function problem002() {
    sum = 0
    n = 2
    n_1 = 1
    while (n < 4000000) {

        if (n%2 == 0) {
            sum += n
        }

        n_next = n + n_1
        n_1 = n
        n = n_next
    }
    return sum
}

/*
 * The prime factors of 13195 are 5, 7, 13 and 29.
 * What is the largest prime factor of the number 600851475143 ?
 */
function problem003() {
    primeFactors = []

    num = 600851475143
    numBuf = num
    for (i = 2; numBuf > 1; i++) {
        if (numBuf%i==0) {
            primeFactors.push(i);
            numBuf = numBuf/i
        }
    }

    // This ... is super weird
    return Math.max(...primeFactors)
}

/*
 * A palindromic number reads the same both ways.
 * The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
 *
 * Find the largest palindrome made from the product of two 3-digit numbers.
 */
function problem004() {
    function isPallindrome(val) {
        valstr = val.toString()
        for (var i = 0; i < valstr.length / 2; i ++) {
            if (valstr[i] != valstr[valstr.length - i - 1]) {
                return false
            }
        }
        return true
    }

    max = 0
    for (var i = 0; i <= 999; i++) {
        for (var j = 0; j <= 999; j++) {
            prod = i*j
            if (isPallindrome(prod) && prod > max) {
                max = prod
            }
        }
    }

    return max
}

/*
 * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 * What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
 */
function problem005() {

    function isValid(n)  {
        for (var i = 1; i <= 20; i++) {
            if (n % i != 0) {
                return false
            }
        }
        return true
    }

    num = 1
    while (true) {
        if (isValid(num)) {
            return num
        } else {
            num += 1
        }
    }
}

/*
 * The sum of the squares of the first ten natural numbers is,
 * 1^2 + 2^2 + ... + 10^2 = 385
 * The square of the sum of the first ten natural numbers is,
 * (1 + 2 + ... + 10)^2 = 552 = 3025
 *
 * Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
 *
 * Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
 */
function problem006() {
    function sumOfSquares(numbers) {
        sum = 0
        numbers.forEach((n) => { sum += n*n })
        return sum
    }

    function squareOfSum(numbers) {
        sum = 0
        numbers.forEach((n) => { sum += n })
        return sum * sum
    }

    // This is how you make a range o_O pretty gross
    numbers = [...Array(101).keys()];

    return squareOfSum(numbers) - sumOfSquares(numbers)
}

/*
 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
 * What is the 10 001st prime number?
 */
// gross but fast
function problem007() {
    target = 10001
    primes = []
    max = 10000
    while (primes.length < target) {
        primes = getPrimes(max)
        max += 1000
    }
    return primes[target-1]
}

/*
 * The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
 *
 * < see number variable >
 *
 * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
 * What is the value of this product?
 */
function problem008() {

    number = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"

    adjacentCount = 13
    max = 0
    numz = []
    for (i = 0; i < number.length; i++) {
        try {
            num = number.slice(i, i + adjacentCount)
            val = num.split("").map((s) => {
                return parseInt(s)
            }).reduce((m, z) => {
                return m * z
            }, 1)
            if (val > max) {
                max = val
            }
        } catch (e) {}
    }

    return max
}

/*
 * A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
 * a^2 + b^2 = c^2
 * For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
 *
 * There exists exactly one Pythagorean triplet for which a + b + c = 1000.
 * Find the product abc.
 */
function problem009() {
    ABC_SUM = 1000
    for (c = 1; c < ABC_SUM; c++) {
        for (b = 1; b < c; b++) {
            for (a = 1; a < b; a++) {
                if ((a*a + b*b) == c*c && (a+b+c) == 1000) {
                    return a*b*c
                }
            }
        }
    }
}

/*
 * The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
 * Find the sum of all the primes below two million.
 */
function problem010() {
    return getPrimes(2000000).reduce((m,i) => { return m + i })
}

console.log("project-euler-js")
console.log(problem010())