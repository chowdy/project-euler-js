var getPrimes = require('get-primes')

/*
 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
 * The sum of these multiples is 23.
 *
 * Find the sum of all the multiples of 3 or 5 below 1000.
 */
function problem001() {
    sum = 0
    for (var i = 0; i < 1000; i++) {
        if (i%3 == 0 || i%5 == 0) {
            sum += i
        }
    }
    return sum
}

/*
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
 * the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
 * even-valued terms.
 */
function problem002() {
    sum = 0
    n = 2
    n_1 = 1
    while (n < 4000000) {

        if (n%2 == 0) {
            sum += n
        }

        n_next = n + n_1
        n_1 = n
        n = n_next
    }
    return sum
}

/*
 * The prime factors of 13195 are 5, 7, 13 and 29.
 * What is the largest prime factor of the number 600851475143 ?
 */
function problem003() {
    primeFactors = []

    num = 600851475143
    numBuf = num
    for (i = 2; numBuf > 1; i++) {
        if (numBuf%i==0) {
            primeFactors.push(i);
            numBuf = numBuf/i
        }
    }

    // This ... is super weird
    return Math.max(...primeFactors)
}

/*
 * A palindromic number reads the same both ways.
 * The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
 *
 * Find the largest palindrome made from the product of two 3-digit numbers.
 */
function problem004() {
    function isPallindrome(val) {
        valstr = val.toString()
        for (var i = 0; i < valstr.length / 2; i ++) {
            if (valstr[i] != valstr[valstr.length - i - 1]) {
                return false
            }
        }
        return true
    }

    max = 0
    for (var i = 0; i <= 999; i++) {
        for (var j = 0; j <= 999; j++) {
            prod = i*j
            if (isPallindrome(prod) && prod > max) {
                max = prod
            }
        }
    }

    return max
}

/*
 * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 * What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
 */
function problem005() {

    function isValid(n)  {
        for (var i = 1; i <= 20; i++) {
            if (n % i != 0) {
                return false
            }
        }
        return true
    }

    num = 1
    while (true) {
        if (isValid(num)) {
            return num
        } else {
            num += 1
        }
    }
}

/*
 * The sum of the squares of the first ten natural numbers is,
 * 1^2 + 2^2 + ... + 10^2 = 385
 * The square of the sum of the first ten natural numbers is,
 * (1 + 2 + ... + 10)^2 = 552 = 3025
 *
 * Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
 *
 * Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
 */
function problem006() {
    function sumOfSquares(numbers) {
        sum = 0
        numbers.forEach((n) => { sum += n*n })
        return sum
    }

    function squareOfSum(numbers) {
        sum = 0
        numbers.forEach((n) => { sum += n })
        return sum * sum
    }

    // This is how you make a range o_O pretty gross
    numbers = [...Array(101).keys()];

    return squareOfSum(numbers) - sumOfSquares(numbers)
}

/*
 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
 * What is the 10 001st prime number?
 */
// gross but fast
function problem007() {
    target = 10001
    primes = []
    max = 10000
    while (primes.length < target) {
        primes = getPrimes(max)
        max += 1000
    }
    return primes[target-1]
}

console.log("project-euler-js")
console.log(problem007())